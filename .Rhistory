runApp('Documents/Ascendance/App')
?req
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
A$i0
A$i0 %>% as.data.frame
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
A$i0
A$i0 %>% as.data.frame
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
?session
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
shiny::runApp('Documents/Ascendance/App')
A$rv
require(pwt)
install.packages("pwt8")
install.packages("pwt")
require(pwt)
require(pwt)
require(pwt8)
require(scatterplot3d)
install.packages("scatterplot3d")
install.packages("calibrate")
require(scatterplot3d)
require(calibrate)
require(mosaic)
require(scales)
require(myR)
require(mosaic)
require(scales)
RiskRatio <- function(mean1, mean2, sd1, sd2, score, type = "N", xaxes = "Set", yaxes = "Set", line = FALSE) {
Risk1 <- 1-pnorm(score, sd = sd1, mean = mean1)
Risk2 <- 1-pnorm(score, sd = sd2, mean = mean2)
print(Risk1)
print(Risk2)
print(Risk2/Risk1)
vector <- c(1/(Risk2/Risk1+1), (Risk2/Risk1)/(1+Risk2/Risk1))
labels <- percent(vector)
if (type == "N") {
par(mar=c(5, 5, 4, 2))
if (xaxes != "Set") {
X <- xaxes
} else {
X <- range(score - 2*abs(mean2-mean1) - sd1*4, score + 2*abs(mean2-mean1) + sd1*4)
}
if (yaxes != "Set") {
Y <- yaxes
} else {
Y <- range(0, ((1)/(sqrt(2*pi)*sd1))*(exp((-(score-mean1)^2)/(2*sd1^2))) +
((1)/(sqrt(2*pi)*sd1))*(exp((-(score-mean1)^2)/(2*sd1^2)))/2)
}
curve(((1)/(sqrt(2*pi)*sd1))*(exp((-(x-mean1)^2)/(2*sd1^2))),
xlim = X, xlab = "Score", main = "Cutoff Differences for Two Normal Populations",
col = "cornflowerblue", ylim = Y, type = "l")
cord.x <- c(mean1-4*sd1,seq(mean1-4*sd1,mean1+4*sd1,0.01),mean1+4*sd1)
cord.y <- c(0,dnorm(seq(mean1-4*sd1,mean1+4*sd1,0.01), mean1, sd1),0)
polygon(cord.x,cord.y,col="cornflowerblue")
curve(((1)/(sqrt(2*pi)*sd2))*(exp((-(x-mean2)^2)/(2*sd2^2))), col = "brown2", type = "l", add = TRUE)
cord.x <- c(mean2-4*sd2,seq(mean2-4*sd2,mean2+4*sd2,0.01),mean2+4*sd2)
cord.y <- c(0,dnorm(seq(mean2-4*sd2,mean2+4*sd2,0.01), mean2, sd2),0)
polygon(cord.x,cord.y,col='brown2')
if (line == TRUE) {
abline(h = 0, v=score, col = "black")
}
} else if (type == "P") {
par(mar=c(5, 5, 4, 2))
lables <- as.character(labels)
names(vector) <- labels
pie(vector, main = "Composition of Cutoff Population",
col = c("brown2", "cornflowerblue"))
} else if (type == "B") {
par(mar=c(5, 13, 5, 13))
barplot(vector, names.arg = labels, col = c("brown2", "cornflowerblue"), ylab = "Relative Proportions",
xlab = "Score", main = "Composition of Cutoff Population")
}
}
par(mfrow = c(1,1))
RiskRatio(mean1 = .09, mean2 = -.09, sd1 = .48, sd2 = .48, score = 1.11, type = "N", xaxes = range(-2, 2), yaxes = range(0, 1))
RiskRatio(mean1 = 100, mean2 = 115, sd1 = 15, sd2 = 15, score = 140, type = "N", xaxes = range(-2, 2), yaxes = range(0, 1))
RiskRatio(mean1 = 100, mean2 = 115, sd1 = 15, sd2 = 15, score = 140, type = "N")
RiskRatio(mean1 = 100, mean2 = 115, sd1 = 15, sd2 = 15, score = 140, type = "P")
RiskRatio(mean1 = 100, mean2 = 115, sd1 = 15, sd2 = 15, score = 140, type = "B")
RiskRatio(mean1 = 115, mean2 = 100, sd1 = 15, sd2 = 15, score = 140, type = "B")
RiskRatio(mean1 = 115, mean2 = 100, sd1 = 15, sd2 = 15, score = 140, type = "N")
RiskRatio(mean1 = 115, mean2 = 100, sd1 = 15, sd2 = 15, score = 140, type = "P")
RiskRatio(mean1 = 115, mean2 = 100, sd1 = 15, sd2 = 15, score = 140, type = "B")
shiny::runApp('Documents/Ascendance/App')
A$rv
require(rcmdr)
install.packages("rcmdr")
install.packages("Rcmdr")
library("Rcmdr"
)
library("Rcmdr")
install.packages("Rcmdr")
install.packages("RcmdrMisc")
library("Rcmdr")
install.packages("grDevices")
require(grDevices)
require(scales)
source("/media/alan/C4A001DBA001D4B8/Users/Jbaptist.Turing/Documents/RProgramming/TimeProgsource.R")
install.packages("DT")
source("/media/alan/C4A001DBA001D4B8/Users/Jbaptist.Turing/Documents/RProgramming/TimeProgsource.R")
source("/media/alan/C4A001DBA001D4B8/Users/Jbaptist.Turing/Documents/RProgramming/TimeProgsource.R")
UpdateTime(labels = c("ClassicalMech", "Thesis", "HistSocialism", "CompSci"), time = c(0, 0, 0, 0), name = "SpringBreakdf",
path = "/home/alan/Documents/")
UpdateTime(labels = c("ClassicalMech", "Thesis", "HistSocialism", "CompSci"), time = c(0, 0, 0, 0), sRe = c(1, 1, 1, 1), name = "SpringBreakdf",
path = "/home/alan/Documents/")
SpringBreakdf
par(mfrow = c(3,2))
TimeProg(df = SpringBreakdf, graphs = c(1, 2, 3, 4), goals = c(104, 20, 10, 10), dates = c("2017-03-25", "2017-04-03",
"2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05"))
par(mfrow = c(3,2))
TimeProg(dat = SpringBreakdf, graphs = c(1, 2, 3, 4), goals = c(104, 20, 10, 10), dates = c("2017-03-25", "2017-04-03",
"2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05"))
par(mfrow = c(2,2))
TimeProg(dat = SpringBreakdf, graphs = c(1, 2, 3, 4), goals = c(104, 20, 10, 10), dates = c("2017-03-25", "2017-04-03",
"2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05"))
CatchUp(df = "SpringBreakdf", subject = "ClassicalMech", days = 15)
par(mfrow = c(2,2))
TimeProg(dat = SpringBreakdf, graphs = c(1, 2, 3, 4), goals = c(104, 20, 1, 1), dates = c("2017-03-25", "2017-04-03",
"2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05"))
SpringBreakdf
par(mfrow = c(2,2))
TimeProg(dat = SpringBreakdf, graphs = c(1, 2, 3, 4), goals = c(104, 20, 1, 1), dates = c("2017-03-25", "2017-04-03",
"2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05", "2017-03-25", "2017-04-05"))
1 % 5
1 / 5
1 %% 5
4 %% 5
3 %% 5
2 %% 5
1 %% 5
shiny::runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
shiny::runApp('Documents/Ascendance/App')
A$rv
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
A$rv
A$iH
#' (1) ---- user presented with widgets to select things they want to keep track of
A$rv
A$rv[[1]]
A$rv[[2]]
A$rv[[3]]
iterator <- A$rv %>% length %>% seq_len
iterator
A$rv[[3]]$Names
A$rv[[3]]$Location
A$rv[[2]]$Location
A$rv[[1]]$Location
A$iH
A$iH[[1]]
A$iH
A$iH
A$iH[[1]]
A$iH[[2]]
A$iH[[3]]
head(A$iH[[3]])
runApp('Documents/Ascendance/App')
A$iH
do.call(rbind, A$iH)
A$iH[1]
A$iH[[1]]
A$iH[[1]]
A$iH[[2]]
A$iH[[2]][,1:7]
rbind(A$iH[[1]], A$iH[[2]][,1:7])
?rbind
rbind(A$iH[[1]], A$iH[[2]][,1:7], A$iH[[3]][,1:7])
ncol(A$iH[[1]])
framelist <- A$iH
NumberOfBasicCols <- ncol(framelist[[1]])
NumberOfColsTot <- ncol(framelist[[length(framelist)]])
NumberOfBasicCols
NumberOfColsTot
framelist[[length(framelist)]][,(NumberOfBasicCols+1):NumberOfColsTot]
framelist[[length(framelist)]][,(NumberOfBasicCols+1):NumberOfColsTot]
x<-framelist[[length(framelist)]][,(NumberOfBasicCols+1):NumberOfColsTot]
length(x)
AncillaryCols <- framelist[[length(framelist)]][,(NumberOfBasicCols+1):NumberOfColsTot]
AncillaryCols[] <- lapply(1:ncol(AncillaryCols), function(x) {
NA
})
for(i in 1:(length(framelist)-1)) {
}
AncillaryCols
i = 1
framelist[[i]]
AncillaryCols <- AncillaryCols[1:nrow(framelist[[i]]),]
AncillaryCols
framelist[[i]]
?append
cbind(framelist[[i]], AncillaryCols)
2:2
i:ncol(AncillaryCols)
i
i=2
i
i:ncol(AncillaryCols)
i = 1
AncillaryColsToReplace <- AncillaryCols[,i:ncol(AncillaryCols)]
AncillaryColsToReplace
cbind(framelist[[i]], AncillaryColsToReplace)
framelist[[i]]
framelist
1:(length(framelist)-1)
for(i in 1:(length(framelist)-1)) {
AncillaryCols <- AncillaryCols[1:nrow(framelist[[i]]),]
AncillaryColsToReplace <- AncillaryCols[,i:ncol(AncillaryCols)]
framelist[[i]] <- cbind(framelist[[i]], AncillaryColsToReplace)
}
framelist
AncillaryColsToReplace
AncillaryCols
framelist <- A$iH
NumberOfBasicCols <- ncol(framelist[[1]])
NumberOfColsTot <- ncol(framelist[[length(framelist)]])
AncillaryCols <- framelist[[length(framelist)]][,(NumberOfBasicCols+1):NumberOfColsTot]
AncillaryCols
AncillaryCols[] <- lapply(1:ncol(AncillaryCols), function(x) {
NA
})
AncillaryCols
AncillaryCols
AncillaryCols <- AncillaryCols[1:nrow(framelist[[i]]),]
AncillaryCols
AncillaryCols[,i:ncol(AncillaryCols), drop = FALSE]
i
AncillaryColsToReplace <- AncillaryCols[,i:ncol(AncillaryCols), drop = FALSE]
cbind(framelist[[i]], AncillaryColsToReplace)
NumberOfBasicCols <- ncol(framelist[[1]])
NumberOfColsTot <- ncol(framelist[[length(framelist)]])
AncillaryCols <- framelist[[length(framelist)]][,(NumberOfBasicCols+1):NumberOfColsTot]
AncillaryCols[] <- lapply(1:ncol(AncillaryCols), function(x) {
NA
})
for(i in 1:(length(framelist)-1)) {
AncillaryCols <- AncillaryCols[1:nrow(framelist[[i]]),]
AncillaryColsToReplace <- AncillaryCols[,i:ncol(AncillaryCols), drop = FALSE]
framelist[[i]] <- cbind(framelist[[i]], AncillaryColsToReplace)
}
framelist
rbind(framelist)
?rbind
do.call(rbind, framelist)
runApp('Documents/Ascendance/App')
A$iH
assemble(A$iH)
assemble <- function(framelist) {
# Looks to see how many columns first data frame has, stores, then last data frame
NumberOfBasicCols <- ncol(framelist[[1]])
NumberOfColsTot <- ncol(framelist[[length(framelist)]])
AncillaryCols <- framelist[[length(framelist)]][,(NumberOfBasicCols+1):NumberOfColsTot]
AncillaryCols[] <- lapply(1:ncol(AncillaryCols), function(x) {
NA
})
for(i in 1:(length(framelist)-1)) {
AncillaryCols <- AncillaryCols[1:nrow(framelist[[i]]),]
AncillaryColsToReplace <- AncillaryCols[,i:ncol(AncillaryCols), drop = FALSE]
framelist[[i]] <- cbind(framelist[[i]], AncillaryColsToReplace)
}
framelist
}
assemble(A$iH)
A$iH
do.call(rbind, A$iH)
A$iH <- do.call(rbind, assemble(A$iH))
A$iH <- do.call(rbind, A$iH)
A$iH
class(A$iH)
A$iH %>% as.tibble
A$iH %>% as.tibble %>% as_data_frame
A$iH %>% as.tibble %>% as.data.frame()
runApp('Documents/Ascendance/App')
A$iH
runApp('Documents/Ascendance/App')
A$iH
as.list(1:length(A$iH$ID))
A$iH$ID <- as.list(1:length(A$iH$ID))
A$iH
runApp('Documents/Ascendance/App')
A$iH
shiny::runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
?substitute
substitute(x <- x + 1, list(x = 1))
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
A$iH
A$rv
runApp('Documents/Ascendance/App')
A$iH
A$iH$Name[ID == "1"]
A$iH$Name[A$iH$ID == "1"]
ID = "1"
A$iH[A$iH$'i0' == ID]
dataset = A$iH[,A$iH$'i0' == ID]
A$iH[A$iH$i0 == ID,]
dataset = A$iH[A$iH$i0 == ID,]
dataset$Name
head(dataset)
ncol(dataset)-7
ncol(dataset) %>% seq_len
dataset$Name[,"i1"]
dataset[,"i1"]
dataset$Name[dataset$i1==1]
dataset$Name[dataset$i0==1]
ID
(dataset$i0==level-1)
level = 2
dataset$Name[ (dataset$i0==level-1) & (dataset$ID == ID)]
head(dataset)
A$iH$ID
nrow(A$iH) %>% seq_len %>% as.list
A$iH$ID <- nrow(A$iH) %>% seq_len %>% as.list
A$iH
dataset$ID
dataset$ID == level - 1
dataset = A$iH[A$iH$i0 == ID,]
dataset$ID == level - 1
dataset
ID
A$iH
ID
dataset = A$iH[A$iH$i0 == ID,]
dataset
dataset = A$iH[A$iH$i0 == ID | A$iH$i0 == 0,]
dataset
dataset$ID == level - 1
Title <- dataset$Name[dataset$ID == level-1]
Title
Title <- dataset$Name[dataset$ID == level-1] %>% unlist
Title
dataset
head(dataset)
A$iH[,(7+level)]
A$iH$Name %>% unlist
dataset = A$iH[(A$iH$i0 == ID | A$iH$i0 == 0) & (A$iH$Name != "Uncategorized"),]
dataset
level - 1 %>% paste("i",.)
(level - 1) %>% paste("i",.)
levelbefore = (level - 1) %>% paste0("i",.)
levelbefore
currentlevel = level %>% paste0("i",.)
currentlevel
levelbefore
levelbefore = (level - 2) %>% paste0("i",.)
currentlevel = level-1 %>% paste0("i",.)
level
levelbefore = (level - 2) %>% paste0("i",.)
currentlevel = (level-1) %>% paste0("i",.)
levelbefore
currentlevel
dataset <- A$iH[(A$iH[[levelbefore]] == ID),]
dataset
dataset = A$iH[(A$iH$i0 == ID | A$iH$i0 == 0) & (A$iH$Name != "Uncategorized"),]
dataset <- dataset[dataset[[levelbefore]] == ID),]
dataset <- dataset[dataset[[levelbefore]] == ID,]
dataset
dataset = A$iH[(A$iH$i0 == ID | A$iH$i0 == 0) & (A$iH$Name != "Uncategorized"),]
dataset <- dataset[(dataset[[levelbefore]] == ID) & (dataset[[currentlevel == 0]]),]
dataset[[currentlevel == 0]]
dataset <- dataset[(dataset[[levelbefore]] == ID) & (dataset[[currentlevel]] == 0),]
dataset
dataset = A$iH[(A$iH$i0 == ID | A$iH$i0 == 0) & (A$iH$Name != "Uncategorized"),]
gettingNames <- dataset[(dataset[[levelbefore]] == ID) & (dataset[[currentlevel]] == 0),]
gettingNames
power_of_two(2)
power_of_two <- function(n) {
if (n == 1) {
return_val <- TRUE
} else if !(n %% 2 == 0) {
return_val <- FALSE
} else {
power_of_two(n/2)
}
return_val
}
if (n == 1) {
return_val <- TRUE
} else if ( !(n %% 2 == 0) ) {
return_val <- FALSE
} else {
power_of_two(n/2)
}
power_of_two <- function(n) {
if (n == 1) {
return_val <- TRUE
} else if ( !(n %% 2 == 0) ) {
return_val <- FALSE
} else {
power_of_two(n/2)
}
return_val
}
power_of_two(2)
power_of_two(4)
power_of_two(1)
4 %% 2 == 0
8 %% 2 == 0
8/2
2 %% 2
power_of_two(2)
n = 2
n == 1
!(n %% 2 == 0)
n %% 2 == 0
power_of_two <- function(n) {
if (n == 1) {
return_val <- TRUE
} else if ( n %% 2 == 0 ) {
power_of_two(n/2)
} else {
return_val <- FALSE
}
return_val
}
power_of_two(1)
power_of_two(2)
power_of_two(4)
n = 2
n == 1
n %% 2 == 0
n = n/2
n
n == 1
power_of_two <- function(n) {
if (n == 1) {
TRUE
} else if ( n %% 2 == 0 ) {
power_of_two(n/2)
} else {
FALSE
}
}
power_of_two(4)
power_of_two(8)
power_of_two(10)
power_of_two(11)
power_of_two(16)
power_of_two(1)
power_of_two <- function(n) {
if (n/2 == 1) {
TRUE
} else if ( n %% 2 == 0 ) {
power_of_two(n/2)
} else {
FALSE
}
}
power_of_two(1)
power_of_two(2)
power_of_two(8)
power_of_two(16)
power_of_two(16*2*2)
power_of_two <- function(n) {
if (n/2 == 1) {
return(TRUE)
} else if ( n %% 2 == 0 ) {
power_of_two(n/2)
} else {
return(FALSE)
}
}
power_of_two? <- function(n) {
if (n/2 == 1) {
return(TRUE)
} else if ( n %% 2 == 0 ) {
power_of_two(n/2)
} else {
return(FALSE)
}
}
power_of_two <- function(n) {
if (n/2 == 1) {
return(TRUE)
} else if ( n %% 2 == 0 ) {
power_of_two(n/2)
} else {
return(FALSE)
}
}
power_of_two(14)
power_of_two(16)
shiny::runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
shiny::runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
A$tentr
runApp('Documents/Ascendance/App')
runApp('Documents/Ascendance/App')
shiny::runApp('Documents/Ascendance/App')
